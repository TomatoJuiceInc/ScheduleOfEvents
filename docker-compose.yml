version: '3.1'

volumes: # какие тома будут использованы для работы наших контейнеров
  pg_scheduleOfEvents: # то есть сюда будут сохраняться файлы докер контейнера

services: # перечисление докер-контейнеров
  scheduleOfEvents_db: # имя нашего контейнера
    image: postgres # какой образ будет скачан для данного контейнера
    restart: always  # говорит о том, что докер-контейнер в форсмажорных ситуациях будет перезапускаться всегда
    environment: # переменные из среды
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=scheduleOfEvents_db
    volumes: # указываем, какие тома используются данным контейнером
      - pg_scheduleOfEvents:/var/lib/postgresql/data

    ports: # указываем порты (справа указываем порт докер-контейнера, который будет открыт у докер-контейнера)
      # а в левой части мы указываем порт нашего компьютера - 127.0.0.1:5433
      # то есть при образение на поорт 5433 нашего компьютера  данное обращение будет перенаправлено в порт 5433 нашего докер - контейнера
      # а на этом порте развернута наша БД
      # 127.0.0.1  - означает что мы ограничиваем доступ
      - "0.0.0.0:5433:5432"
  app:  # еще один новый сервис
    restart: always # будет рестартиться в "плохую погоду"
    build: .  # указываем путь до Dockerfile. '.' - значит, что файл лежит в той же директории, что и docker-compose файл
    ports:
      - "8080:8080" # в правой части - порт докер контейнера, а слева - порт нашего приложения
    depends_on:
      - scheduleOfEvents_db  # данный сервис зависит от demo_db (то есть сначала нужно запустить контейнер с БД)
    environment:
      # переопределит spring.datasource.url из .properties
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://scheduleOfEvents_db:5432/scheduleOfEvents_db'  # localhost - поменяли на demo_db(так как уазываем на адрес докера, где у нас бд)
      JAVA_OPTS: '-Xmx512m'